# app/main.py
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from typing import Dict, Any, Optional
import os
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(
    title="Bluelabel AIOS",
    description="Agentic Intelligence Operating System",
    version="0.1.0",
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# For initial testing, we'll use a simple in-memory storage
# This will be replaced with proper agent implementations later
agents = {
    "contentmind": {
        "name": "contentmind",
        "description": "Processes and organizes content from various sources",
        "supported_content_types": ["url"],
        "features": ["content extraction", "summarization"]
    }
}

@app.get("/")
async def root():
    return {"message": "Welcome to Bluelabel AIOS API"}

@app.get("/agents")
async def list_agents():
    """List all available agents"""
    return agents

@app.post("/agents/{agent_name}/process")
async def process_with_agent(agent_name: str, request: Dict[str, Any]):
    """Process a request with a specific agent"""
    if agent_name not in agents:
        raise HTTPException(status_code=404, detail=f"Agent {agent_name} not found")
    
    # For initial testing, we'll just return a mock response
    content_type = request.get("content_type")
    content = request.get("content")
    
    if not content_type or not content:
        raise HTTPException(status_code=400, detail="Missing content_type or content in request")
    
    if content_type == "url":
        # Mock URL processing
        logger.info(f"Processing URL: {content}")
        return {
            "status": "success",
            "content_type": content_type,
            "original_url": content,
            "processed_content": {
                "title": "Sample Article",
                "summary": "This is a placeholder summary for the URL. In the full implementation, this will be generated by processing the actual content of the URL.",
                "source": content,
                "extracted_at": "2023-01-01T00:00:00"
            }
        }
    else:
        return {
            "status": "error",
            "message": f"Content type '{content_type}' not yet implemented"
        }

# Run the app with: uvicorn app.main:app --reload